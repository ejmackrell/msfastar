[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeff Jones. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jones J (2023). epfasta: Easy Proteomics FASTA Reader Parser. R package version 0.8.0.","code":"@Manual{,   title = {epfasta: An Easy Proteomics FASTA Reader and Parser},   author = {Jeff Jones},   year = {2023},   note = {R package version 0.8.0}, }"},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An Easy Proteomics FASTA Reader and Parser","text":"install, open R type:","code":"install.packages(\"devtools\") devtools::install_github(\"jeffsocal/epfasta\")"},{"path":"/index.html","id":"get-started","dir":"","previous_headings":"","what":"Get Started","title":"An Easy Proteomics FASTA Reader and Parser","text":"simple get started, just point read_fasta() function downloaded FASTA file save object. addition, expected peptides can generated digest() function. Alternatively read_fasta FASTA file data.frame.","code":"library(epfasta) #>  #> Attaching package: 'epfasta' #> The following object is masked from 'package:base': #>  #>     read_fasta  path_to_fasta <- system.file(\"extdata\", \"albu_human.fasta\", package = \"epfasta\") fasta_data <- read_fasta(path_to_fasta) #> ℹ Parsing FASTA file albu_human.fasta #> ✔ Parsing FASTA file albu_human.fasta ... done #>   fasta_data[[1]] #> $accession #> [1] \"P02768\" #>  #> $protein_name #> [1] \"ALBU_HUMAN\" #>  #> $gene_name #> [1] \"ALB\" #>  #> $organism #> [1] \"Homo sapiens\" #>  #> $description #> [1] \"Albumin\" #>  #> $sequence #> [1] \"MKWVTFISLLFLFSSAYSRGVFRRDAHKSEVAHRFKDLGEENFKALVLIAFAQYLQQCPFEDHVKLVNEVTEFAKTCVADESAENCDKSLHTLFGDKLCTVATLRETYGEMADCCAKQEPERNECFLQHKDDNPNLPRLVRPEVDVMCTAFHDNEETFLKKYLYEIARRHPYFYAPELLFFAKRYKAAFTECCQAADKAACLLPKLDELRDEGKASSAKQRLKCASLQKFGERAFKAWAVARLSQRFPKAEFAEVSKLVTDLTKVHTECCHGDLLECADDRADLAKYICENQDSISSKLKECCEKPLLEKSHCIAEVENDEMPADLPSLAADFVESKDVCKNYAEAKDVFLGMFLYEYARRHPDYSVVLLLRLAKTYETTLEKCCAAADPHECYAKVFDEFKPLVEEPQNLIKQNCELFEQLGEYKFQNALLVRYTKKVPQVSTPTLVEVSRNLGKVGSKCCKHPEAKRMPCAEDYLSVVLNQLCVLHEKTPVSDRVTKCCTESLVNRRPCFSALEVDETYVPKEFNAETFTFHADICTLSEKERQIKKQTALVELVKHKPKATKEQLKAVMDDFAAFVEKCCKADDKETCFAEEGKKLVAASQAALGL\" fasta_data <- lapply(fasta_data, digest)  fasta_data[[1]] #> $accession #> [1] \"P02768\" #>  #> $protein_name #> [1] \"ALBU_HUMAN\" #>  #> $gene_name #> [1] \"ALB\" #>  #> $organism #> [1] \"Homo sapiens\" #>  #> $description #> [1] \"Albumin\" #>  #> $sequence #> [1] \"MKWVTFISLLFLFSSAYSRGVFRRDAHKSEVAHRFKDLGEENFKALVLIAFAQYLQQCPFEDHVKLVNEVTEFAKTCVADESAENCDKSLHTLFGDKLCTVATLRETYGEMADCCAKQEPERNECFLQHKDDNPNLPRLVRPEVDVMCTAFHDNEETFLKKYLYEIARRHPYFYAPELLFFAKRYKAAFTECCQAADKAACLLPKLDELRDEGKASSAKQRLKCASLQKFGERAFKAWAVARLSQRFPKAEFAEVSKLVTDLTKVHTECCHGDLLECADDRADLAKYICENQDSISSKLKECCEKPLLEKSHCIAEVENDEMPADLPSLAADFVESKDVCKNYAEAKDVFLGMFLYEYARRHPDYSVVLLLRLAKTYETTLEKCCAAADPHECYAKVFDEFKPLVEEPQNLIKQNCELFEQLGEYKFQNALLVRYTKKVPQVSTPTLVEVSRNLGKVGSKCCKHPEAKRMPCAEDYLSVVLNQLCVLHEKTPVSDRVTKCCTESLVNRRPCFSALEVDETYVPKEFNAETFTFHADICTLSEKERQIKKQTALVELVKHKPKATKEQLKAVMDDFAAFVEKCCKADDKETCFAEEGKKLVAASQAALGL\" #>  #> $peptideslibrary(tidyverse, warn.conflicts = FALSE) #> ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ── #> ✔ ggplot2 3.3.6     ✔ purrr   0.3.4 #> ✔ tibble  3.1.8     ✔ dplyr   1.0.9 #> ✔ tidyr   1.2.0     ✔ stringr 1.4.0 #> ✔ readr   2.1.2     ✔ forcats 0.5.1 #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter()  masks stats::filter() #> ✖ dplyr::lag()     masks stats::lag() #> ✖ stringr::regex() masks epfasta::regex() fasta_data <- read_fasta(path_to_fasta, as = \"data.frame\") |> as_tibble() #> ℹ Parsing FASTA file albu_human.fasta #> ✔ Parsing FASTA file albu_human.fasta ... done  fasta_data #> # A tibble: 3 × 6 #>   accession protein_name gene_name organism     description          sequence    #>   <chr>     <chr>        <chr>     <chr>        <chr>                <chr>       #> 1 P02768    ALBU_HUMAN   ALB       Homo sapiens Albumin              MKWVTFISLL… #> 2 P02768    ALBU_HUMAN   <NA>      Homo sapiens Isoform 2 of Albumin MKWVTFISLL… #> 3 P02768    ALBU_HUMAN   <NA>      Homo sapiens Isoform 3 of Albumin MKWVTFISLL…"},{"path":"/reference/check_fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the integrity of a epfasta data object — check_fasta","title":"Check the integrity of a epfasta data object — check_fasta","text":"check_fasta() helper function checks structure contents epfasta data object","code":""},{"path":"/reference/check_fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the integrity of a epfasta data object — check_fasta","text":"","code":"check_fasta(x = NULL)"},{"path":"/reference/check_fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the integrity of a epfasta data object — check_fasta","text":"data epfasta data object","code":""},{"path":"/reference/check_fasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the integrity of a epfasta data object — check_fasta","text":"silent success, abort message fail","code":""},{"path":"/reference/digest.html","id":null,"dir":"Reference","previous_headings":"","what":"Proteolytic digest a read_fastad fasta list — digest","title":"Proteolytic digest a read_fastad fasta list — digest","text":"digest() Generates peptide sequences based enzyme partial inputs. works \"list\" output read_fasta() function","code":""},{"path":"/reference/digest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proteolytic digest a read_fastad fasta list — digest","text":"","code":"digest(x = NULL, ...)"},{"path":"/reference/digest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proteolytic digest a read_fastad fasta list — digest","text":"x epFASTA data object ... parameters peptides()","code":""},{"path":"/reference/digest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Proteolytic digest a read_fastad fasta list — digest","text":"epfasta data object","code":""},{"path":"/reference/digest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proteolytic digest a read_fastad fasta list — digest","text":"","code":"library(epfasta) proteins <- read_fasta(\"~/Local/fasta/ecoli_UniProt.fasta\") #> ℹ Parsing FASTA file ecoli_UniProt.fasta #> ✖ Parsing FASTA file ecoli_UniProt.fasta ... failed #>  #> Error in value[[3L]](cond): Error: '~/Local/fasta/ecoli_UniProt.fasta' does not exist.  proteins <- digest(proteins, enzyme = \"[K]\", partial = 2) #> Error in check_fasta(x): object 'proteins' not found"},{"path":"/reference/extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the string defined by the regex — extract","title":"Get the string defined by the regex — extract","text":"extract() get current string based regex","code":""},{"path":"/reference/extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the string defined by the regex — extract","text":"","code":"extract(string = NULL, regex = NULL)"},{"path":"/reference/extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the string defined by the regex — extract","text":"string character regex list","code":""},{"path":"/reference/extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the string defined by the regex — extract","text":"list","code":""},{"path":"/reference/get_peptides.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all peptides from epFASTA object as a vector — get_peptides","title":"Get all peptides from epFASTA object as a vector — get_peptides","text":"get_peptides() return peptides string vector","code":""},{"path":"/reference/get_peptides.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all peptides from epFASTA object as a vector — get_peptides","text":"","code":"get_peptides(x = NULL)"},{"path":"/reference/get_peptides.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all peptides from epFASTA object as a vector — get_peptides","text":"x epFASTA data object","code":""},{"path":"/reference/get_peptides.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all peptides from epFASTA object as a vector — get_peptides","text":"vector","code":""},{"path":"/reference/peptides.html","id":null,"dir":"Reference","previous_headings":"","what":"Proteolytic digest a sequence — peptides","title":"Proteolytic digest a sequence — peptides","text":"peptides() Generates peptide sequences based enzyme partial inputs.","code":""},{"path":"/reference/peptides.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proteolytic digest a sequence — peptides","text":"","code":"peptides(sequence = NULL, enzyme = \"[KR]\", partial = 0:3, length = c(6, 30))"},{"path":"/reference/peptides.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proteolytic digest a sequence — peptides","text":"sequence character string enzyme character string regular expression use proteolytically digest sequence. [KR] ... trypsin [KR](?!P) ... trypsin P [R](?!P) ... arg-c [K](?!P) ... lys-c [FYWL](?!P) ... chymotrypsin [BD] ... asp-n [D] ... formic acid [FL] ... pepsin-partial numeric representing number incomplete enzymatic sites (mis-clevage). length numeric vactor representing minimum maximum sequence lengths.","code":""},{"path":"/reference/peptides.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Proteolytic digest a sequence — peptides","text":"vector","code":""},{"path":"/reference/peptides.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proteolytic digest a sequence — peptides","text":"","code":"library(epfasta) sequence <- \"SAMERSMALLKPSAMPLERSEQUENCE\" peptides(sequence) #> [1] \"PSAMPLER\" \"SEQUENCE\" \"SMALLK\"    peptides(sequence, enzyme = \"[L]\", partial = 2, length = c(1,12)) #> [1] \"ERSEQUENCE\" \"KPSAMPL\"    \"L\"          \"LKPSAMPL\"   \"SAMERSMAL\"  #> [6] \"SAMERSMALL\""},{"path":"/reference/print.rmsfasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy-Quant data object print definition — print.rmsfasta","title":"Tidy-Quant data object print definition — print.rmsfasta","text":"Tidy-Quant data object print definition","code":""},{"path":"/reference/print.rmsfasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy-Quant data object print definition — print.rmsfasta","text":"","code":"# S3 method for rmsfasta print(x, ...)"},{"path":"/reference/print.rmsfasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy-Quant data object print definition — print.rmsfasta","text":"x epfasta data object ... unused legacy","code":""},{"path":"/reference/print.rmsfasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy-Quant data object print definition — print.rmsfasta","text":"print object summary","code":""},{"path":"/reference/println.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for printing messages — println","title":"Helper function for printing messages — println","text":"Helper function printing messages","code":""},{"path":"/reference/println.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for printing messages — println","text":"","code":"println(name = \"\", message = \"\", pad_length = 15)"},{"path":"/reference/println.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for printing messages — println","text":"name string message string pad_length string","code":""},{"path":"/reference/println.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for printing messages — println","text":"console print line","code":""},{"path":"/reference/read_fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"The main function for parsing a fasta file — read_fasta","title":"The main function for parsing a fasta file — read_fasta","text":"read_fasta() get current regex","code":""},{"path":"/reference/read_fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The main function for parsing a fasta file — read_fasta","text":"","code":"read_fasta(fasta_path = NULL, patterns = NULL, as = c(\"list\", \"data.frame\"))"},{"path":"/reference/read_fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The main function for parsing a fasta file — read_fasta","text":"fasta_path character string path fasta formatted file patterns list, provided default regex() used. Note: first element regex list define list reference name, list output, protein can accessed designation. Note: patterns list missing explicit \"sequence\" element, sequence returned. might beneficial meta elements sought. character designating output format","code":""},{"path":"/reference/read_fasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The main function for parsing a fasta file — read_fasta","text":"list","code":""},{"path":"/reference/read_fasta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The main function for parsing a fasta file — read_fasta","text":"","code":"if (FALSE) { library(epfasta) proteins <- read_fasta(\"~/Local/fasta/ecoli_UniProt.fasta\")  # using a custom supplied regex list proteins <- read_fasta(fasta_path = \"~/Local/fasta/ecoli_UniProt.fasta\",                   pattern = list(                       \"accession\" = \"sp\\\\|[A-Z]\",                       \"gene_name\" = \"(?<=GN\\\\=).*?(?=\\\\s..\\\\=)\"                   )) }"},{"path":"/reference/regex.html","id":null,"dir":"Reference","previous_headings":"","what":"Get/Set the FASTA meta data regex — regex","title":"Get/Set the FASTA meta data regex — regex","text":"regex() gets sets current regex patters assist read_fasta() function. simply provides structure needed read_fasta fasta file, custom list can also supplied. set elements regex() function, simply provide list complementary names -write current list.","code":""},{"path":"/reference/regex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get/Set the FASTA meta data regex — regex","text":"","code":"regex(params = NULL)"},{"path":"/reference/regex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get/Set the FASTA meta data regex — regex","text":"params list","code":""},{"path":"/reference/regex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get/Set the FASTA meta data regex — regex","text":"list","code":""},{"path":"/reference/regex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get/Set the FASTA meta data regex — regex","text":"","code":"library(epfasta) regex() #> $accession #> [1] \"(?<=|)[A-Z0-9]{5,12}\" #>  #> $protein_name #> [1] \"(?<=|)[A-Z0-9\\\\_]{8,}(?=\\\\s)\" #>  #> $gene_name #> [1] \"(?<=GN\\\\=).*?(?=\\\\s..\\\\=)\" #>  #> $organism #> [1] \"(?<=OS\\\\=).*?(?=\\\\s..\\\\=)\" #>  #> $description #> [1] \"(?<=\\\\s).*?(?=\\\\s..\\\\=)\" #>  #> $sequence #> [1] \"[A-Z]\" #>   regex(list(\"accession\" = \"sp\\\\|[A-Z]\")) #> $accession #> [1] \"sp\\\\|[A-Z]\" #>  #> $protein_name #> [1] \"(?<=|)[A-Z0-9\\\\_]{8,}(?=\\\\s)\" #>  #> $gene_name #> [1] \"(?<=GN\\\\=).*?(?=\\\\s..\\\\=)\" #>  #> $organism #> [1] \"(?<=OS\\\\=).*?(?=\\\\s..\\\\=)\" #>  #> $description #> [1] \"(?<=\\\\s).*?(?=\\\\s..\\\\=)\" #>  #> $sequence #> [1] \"[A-Z]\" #>"},{"path":"/reference/rmsfasta.html","id":null,"dir":"Reference","previous_headings":"","what":"FASTA data object — rmsfasta","title":"FASTA data object — rmsfasta","text":"FASTA data object","code":""},{"path":"/reference/rmsfasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FASTA data object — rmsfasta","text":"","code":"rmsfasta(obj)"},{"path":"/reference/rmsfasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FASTA data object — rmsfasta","text":"obj FASTA data list","code":""},{"path":"/reference/rmsfasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FASTA data object — rmsfasta","text":"FASTA data object","code":""}]
