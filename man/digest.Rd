% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/digest.R
\name{digest}
\alias{digest}
\title{Proteolytic digest a fasta data object}
\usage{
digest(
  x = NULL,
  regex = ".*?[KR]",
  partial = 2,
  peptide_length = c(6, 30),
  remove_m = FALSE,
  mc.cores = 1
)
}
\arguments{
\item{x}{An rmfasta data object}

\item{regex}{The regular expression used to specify which amino acids to cleave at.
\itemize{
\item \verb{.*?[KR]} ... trypsin
\item \verb{.*?[KR](?!P)} ... trypsin not at P
\item \verb{.*?[R](?!P)} ... arg-c
\item \verb{.*?[K](?!P)} ... lys-c
\item \verb{.*?[FYWL](?!P)} ... chymotrypsin
\item \verb{.*?[BD]} ... asp-n
\item \verb{.*?[D]} ... formic acid
\item \verb{.*?[FL]} ... pepsin-a
}}

\item{partial}{The number of incomplete cleavage sites peptides can retain in the database}

\item{peptide_length}{As numeric vector representing the minimum and maximum sequence lengths.}

\item{remove_m}{A boolean to indicate if the n-term M should be variably removed}

\item{mc.cores}{The number of CPU cores to engage in protein digestion}
}
\description{
\code{digest()} Generates peptide sequences based on \emph{enzyme} and \emph{partial} inputs.
Only works with the "list" output of the \code{read_fasta()} function
}
\examples{
library(msfastar)
proteins <- system.file("extdata", "albu_human.fasta", package = "msfastar") |> read_fasta()

proteins <- digest(proteins, regex = ".*?[K]", partial = 2)

}
